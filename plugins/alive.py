## ¬©copyright infringement on Team Shadow Projects
## support: https://t.me/tgshadow_fighters
## network: https://t.me/teamshadowprojects


import asyncio
from time import time
from datetime import datetime
from modules.helpers.filters import command
from modules.helpers.command import commandpro
from pyrogram import Client, filters, __version__ as pyrover
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ChatJoinRequest
import random
from pyrogram.errors import UserNotParticipant
from modules.database.dbchat import add_served_chat, is_served_chat
from modules.__main__ import bot
from modules import __version__
from pytgcalls import (__version__ as pytover)
from sys import version_info

__major__ = 0
__minor__ = 2
__micro__ = 1

__python_version__ = f"{version_info[0]}.{version_info[1]}.{version_info[2]}"


START_TIME = datetime.utcnow()
START_TIME_ISO = START_TIME.replace(microsecond=0).isoformat()
TIME_DURATION_UNITS = (
    ('week', 60 * 60 * 24 * 7),
    ('day', 60 * 60 * 24),
    ('hour', 60 * 60),
    ('min', 60),
    ('sec', 1)
)

async def _human_time_duration(seconds):
    if seconds == 0:
        return 'inf'
    parts = []
    for unit, div in TIME_DURATION_UNITS:
        amount, seconds = divmod(int(seconds), div)
        if amount > 0:
            parts.append('{} {}{}'
                         .format(amount, unit, "" if amount == 1 else "s"))
    return ', '.join(parts)
    
@Client.on_message(command("start") & filters.private & ~filters.edited)
async def start_(client: Client, message: Message):  
    await message.reply_photo(
        photo=random.choice(START_IMG_URL),
        caption=f"""**üëãüèª  ú·¥á ü ü·¥è {message.from_user.mention()} …™·¥Ä·¥ç ·¥Ä ·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥° ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ …™·¥Ä·¥ç ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç 
…¢ Ä·¥è·¥ú·¥òs ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥ús·¥á“ì·¥ú ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.. ·¥Ä…¥ è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ  ú…™·¥õ ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö /help..
 
·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è : [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters) **
""",
    reply_markup=InlineKeyboardMarkup( [[
            InlineKeyboardButton("s ú·¥Ä·¥Ö·¥è·¥° ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös  ü…™s·¥õ", callback_data="command_list"), 
            ],[
            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/tgshadow_fighters"), 
            InlineKeyboardButton("·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/teamshadowprojects"), 
            ],[
            InlineKeyboardButton("…™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥", callback_data="info"), 
            ],[
            InlineKeyboardButton("‚úö ·¥ò ü·¥á·¥Äs·¥á ·¥Ä·¥Ö·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚úö", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ]]
            ) 
        ) 
    
    
@Client.on_message(commandpro(["/alive",]) & filters.group & ~filters.edited)
async def alive(client: Client, message: Message):
    await message.reply_photo(
        photo=random.choice(START_IMG_URL),
        caption=f""" ú·¥á ü ü·¥è.. {message.from_user.mention()} …™·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á …¥·¥è·¥° ·¥° ú·¥Ä·¥õ ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ..""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥á", callback_data="info")
                ]
            ]
        ),
    )


@Client.on_message(command("help") & filters.private & ~filters.edited)
async def help(client: Client, message: Message):
    await message.reply_photo(
        photo=f"https://te.legra.ph/file/02daf1a0d434a29f9d54c.jpg",
        caption=f""" ‚ú® ** ú·¥á ü ü·¥è {message.from_user.mention()} !**\n
üíò **·¥õ·¥è ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è s·¥á·¥õ·¥ú·¥ò ·¥õ ú…™s  ô·¥è·¥õ?  Ä·¥á·¥Ä·¥Ö üíñ s·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥õ ú…™s  ô·¥è·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥ò **\n
üíó **·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ò ü·¥Ä è /·¥Ä·¥ú·¥Ö…™·¥è?  Ä·¥á·¥Ä·¥Ö üíñ «´·¥ú…™·¥Ñ·¥ã ·¥ús·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös **\n
üíù **·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥á·¥†·¥á Ä è s…™…¥…¢ ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è“ì  ô·¥è·¥õ?  Ä·¥á·¥Ä·¥Ö üíñ ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**\n """,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ü…™s·¥õ", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_message(command("ghelp") & filters.group & ~filters.edited)
async def gelp(client: Client, message: Message):
    await message.reply_photo(
        photo=f"https://te.legra.ph/file/02daf1a0d434a29f9d54c.jpg",
        caption=f""" ‚ú® ** ú·¥á ü ü·¥è {message.from_user.mention()} !**\n
üíò **·¥õ·¥è ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è s·¥á·¥õ·¥ú·¥ò ·¥õ ú…™s  ô·¥è·¥õ?  Ä·¥á·¥Ä·¥Ö üíñ s·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥õ ú…™s  ô·¥è·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥ò **\n
üíó **·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ò ü·¥Ä è /·¥Ä·¥ú·¥Ö…™·¥è?  Ä·¥á·¥Ä·¥Ö üíñ «´·¥ú…™·¥Ñ·¥ã ·¥ús·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös **\n
üíù **·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥á·¥†·¥á Ä è s…™…¥…¢ ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è“ì  ô·¥è·¥õ?  Ä·¥á·¥Ä·¥Ö üíñ ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**\n """,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ü…™s·¥õ", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_message(command(["uptime", f"uptime@{BOT_USERNAME}"]) & ~filters.edited)
async def get_uptime(c: Client, message: Message):
    current_time = datetime.utcnow()
    uptime_sec = (current_time - START_TIME).total_seconds()
    uptime = await _human_time_duration(int(uptime_sec))
    await message.reply_photo(
        photo=random.choice(START_IMG_URL), 
        caption="üòä ·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°  ô·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús:\n"
                f"‚Ä¢ **·¥ú·¥ò·¥õ…™·¥ç·¥á:** **{uptime}**\n"
                f"‚Ä¢ **·¥ús·¥á Ä:** **{message.from_user.mention()}**\n"
                f"‚Ä¢ **s·¥õ·¥Ä Ä·¥õ ·¥õ…™·¥ç·¥á:** **{START_TIME_ISO}**\n"
                f"‚Ä¢ **·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è:** **@{GROUP_SUPPORT}**"
              ) 


@Client.on_message(command(["ping", f"ping@{BOT_USERNAME}"]) & ~filters.edited)
async def ping_pong(c: Client, message: Message):
    start = time()
    m_reply = await message.reply_text("·¥ò…™…¥…¢…™…¥…¢...")
    delta_ping = time() - start
    await m_reply.edit_text("üíù `·¥ò·¥è…¥…¢!!`\n" f"üíñ `{delta_ping * 1000:.3f} ms`")


@Client.on_message(command("id") & ~filters.edited) 
async def id(c: Client, message: Message):
    text = """
**·¥õ ú…™s …™s  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö** : `{}`"""
    await message.reply_text(
        text=text.format(
            message.chat.id
        ), 
    ) 


@Client.on_callback_query(filters.regex("home_start"))
async def start_set(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""üëãüèª ** ú·¥á ü ü·¥è {query.message.from_user.mention()} …™·¥Ä·¥ç ·¥Ä ·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥° ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ …™·¥Ä·¥ç ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç.. 
…¢ Ä·¥è·¥ú·¥òs ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥ús·¥á“ì·¥ú ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.. ·¥Ä…¥ è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ  ú…™·¥õ ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö /help..
·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è : [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters) !**
""", 
    reply_markup=InlineKeyboardMarkup( [[
            InlineKeyboardButton("s ú·¥Ä·¥Ö·¥è·¥° ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös  ü…™s·¥õ", callback_data="command_list"), 
            ],[
            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/tgshadow_fighters"), 
            InlineKeyboardButton("·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/teamshadowprojects"), 
            ],[
            InlineKeyboardButton("…™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥", callback_data="info"), 
            ],[
            InlineKeyboardButton("‚úö ·¥ò ü·¥á·¥Äs·¥á ·¥Ä·¥Ö·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚úö", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ]]
            ) 
        ) 
     

@Client.on_callback_query(filters.regex("command_list"))
async def commands_set(_, query: CallbackQuery):
    await query.answer("command list") 
    await query.edit_message_text(
        f"""üíó  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) 
‚û†  ú·¥á ü ü·¥è …¥·¥Ä·¥çs·¥õ ú·¥á ·¥Ä…¥…¥·¥Ä ·¥õ ú…™s …™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ü…™s·¥õ …¢·¥ú…™·¥Ö·¥á ·¥° ú·¥Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  è·¥è·¥ú …¥·¥á·¥Ö·¥Ö s·¥á ü·¥á·¥Ñ·¥õ  ú·¥á Ä·¥á.. 
‚û† ·¥õ ú…™s  ô·¥è·¥õ ·¥ç·¥Ä·¥Ö·¥á ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥° ·¥ò Ä·¥è·¥ä·¥á·¥Ñ·¥õs](https://t.me/tgshadow_fighters) 
""", 
    reply_markup=InlineKeyboardMarkup( [[
            InlineKeyboardButton("·¥ús·¥á Äs ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös‚Ä¢", callback_data="general_list"), 
            ],[
            InlineKeyboardButton("s·¥ã…™·¥ò", callback_data="skip_list"), 
            InlineKeyboardButton("·¥ò·¥Ä·¥ús·¥á", callback_data="pause_list"), 
            ],[
            InlineKeyboardButton(" Ä·¥ás·¥ú·¥ç·¥á", callback_data="resume_list"), 
            InlineKeyboardButton("s·¥õ·¥è·¥ò", callback_data="stop_list"), 
            ],[
            InlineKeyboardButton("·¥ò ü·¥Ä è", callback_data="play_list"), 
            InlineKeyboardButton("·¥ã…¥·¥è·¥°  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö", callback_data="id"), 
            ],[
            InlineKeyboardButton("s·¥è·¥ú Ä·¥Ñ·¥á", callback_data="source"), 
            ],[
            InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="home_start"), 
            ]]
            ) 
        ) 
    

@Client.on_callback_query(filters.regex("general_list"))
async def general_list(_, query: CallbackQuery):
    await query.answer("general commands")
    await query.edit_message_text(
        f"""ü•≥  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
ùü∑Ô∏è‚É£ /·¥ò ü·¥Ä è - ·¥ò ü·¥Ä è ·¥ç·¥úÍú±…™·¥Ñ ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ   

ùü∏Ô∏è‚É£ /s·¥è…¥…¢ - ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö Íú±·¥è…¥…¢ Íú∞ Ä·¥è·¥ç  è·¥õ

ùüπÔ∏è‚É£ /·¥Ä ü…™·¥†·¥á - Íú± ú·¥è·¥° ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä ü…™·¥†·¥á …™…¥Íú∞·¥è

ùü∫Ô∏è‚É£ /·¥ò·¥Ä·¥ús·¥á - ·¥ò·¥Ä·¥úÍú±·¥á ·¥õ ú·¥á Íú±·¥õ Ä·¥á·¥Ä·¥ç 

ùüªÔ∏è‚É£ / Ä·¥ás·¥ú·¥ç·¥á -  Ä·¥áÍú±·¥ú·¥ç·¥á ·¥õ ú·¥á Íú±·¥õ Ä·¥á·¥Ä·¥ç 

ùüºÔ∏è‚É£ /s·¥ã…™·¥ò - Íú±·¥°…™·¥õ·¥Ñ ú ·¥õ·¥è …¥·¥áx·¥õ Íú±·¥õ Ä·¥á·¥Ä·¥ç 

ùüΩÔ∏è‚É£ /s·¥õ·¥è·¥ò - Íú±·¥õ·¥è·¥ò ·¥õ ú·¥á Íú±·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢

ùüæÔ∏è‚É£ / Ä·¥á ü·¥è·¥Ä·¥Ö - ·¥Ñ ü·¥á·¥Ä Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä·¥Ñ ú·¥á

·¥Ö·¥áÍú±…™…¢…¥·¥á·¥Ö  ô è ·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        " ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_callback_query(filters.regex("skip_list"))
async def skip_list(_, query: CallbackQuery):
    await query.answer("skiped current song")
    await query.edit_message_text(
        f"""üö©  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
‚û† **/skip ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä s·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥òs “ì·¥è Ä s·¥ã…™·¥ò ·¥õ·¥è …¥·¥áx·¥õ s·¥è…¥…¢ …™…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs/n·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö  ô·¥è·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä's..**
‚û† **·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/teamshadowprojects)**""", 
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        " ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_callback_query(filters.regex("pause_list"))
async def pause_list(_, query: CallbackQuery):
    await query.answer("pause current playing song")
    await query.edit_message_text(
        f"""üíò  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
‚û† **/pause ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä s·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥òs “ì·¥è Ä ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ü·¥Ä è…™…¥…¢ s·¥è…¥…¢ …™…¥ …¢ Ä·¥è·¥ú·¥ò/n·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö  ô·¥è·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä's..**
‚û† **·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters)**""", 
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        " ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_callback_query(filters.regex("resume_list")) 
async def resume_list(_, query: CallbackQuery):
    await query.answer("resume current playing song")
    await query.edit_message_text(
        f"""‚ù§  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
‚û† **/resume ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä s·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥òs “ì·¥è Ä  Ä·¥ás·¥ú·¥ç·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ü·¥Ä è…™…¥…¢ s·¥è…¥…¢/n·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö  ô·¥è·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä's..**
‚û† **·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/Team_shadowmusic_bot)**""", 
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        " ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_callback_query(filters.regex("stop_list"))
async def stop_list(_, query: CallbackQuery):
    await query.answer("stopping current playing song")
    await query.edit_message_text(
        f"""üíì  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
‚û† **/end ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä s·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥òs “ì·¥è Ä ·¥á…¥·¥Ö s·¥è…¥…¢s …™…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs/n·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö  ô·¥è·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä's..**
‚û† **·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters)**""", 
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        " ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_callback_query(filters.regex("play_list"))
async def play_list(_, query: CallbackQuery):
    await query.answer("playing song in vc")
    await query.edit_message_text(
        f"""‚ú®  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
‚û† **/play ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä ·¥ò ü·¥Ä è ·¥Ä s·¥è…¥…¢s …™…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs/n·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö  ô·¥è·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä's..**
‚û† **·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters)**""", 
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        " ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")
                ]
            ]
        ),
    )


@Client.on_callback_query(filters.regex("id"))
async def id(_, query: CallbackQuery):
    await query.answer("chat id")
    await query.edit_message_text(
        f"""üëãüèª ** ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !**
‚û† **/id ·¥õ è·¥ò·¥á …™·¥Ö …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á ·¥ò·¥á Äs·¥è…¥·¥Ä ü !**""", 
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")]]
        ),
    )


@Client.on_callback_query(filters.regex("source"))
async def source(_, query: CallbackQuery):
    await query.answer("team shadow source code")
    await query.edit_message_text(
        f"""‚ù£Ô∏è ** ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !**
‚û†  **s ú·¥Ä·¥Ö·¥è·¥° ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ …™s ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥Ñ ü·¥ès·¥á·¥Ö s·¥è·¥ú Ä·¥Ñ·¥á  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥Ä…¥ è  ô·¥ú…¢s ·¥è Ä  Ä·¥á·¥ò·¥è Ä·¥õs ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ö·¥á·¥† [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters)!**""", 
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="command_list")]]
        ),
    )


@Client.on_callback_query(filters.regex("info"))
async def info(_, query: CallbackQuery):
    await query.answer("information")
    await query.edit_message_text(
        f"""‚ú®  ú·¥á ü ü·¥è [{query.message.chat.first_name}](tg://user?id={query.message.chat.id}) !
üíò ·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥° …™s ·¥Ä  ô·¥è·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö …™…¥ s·¥è ·¥ç·¥Ä…¥ è s·¥á Ä·¥†·¥á Ä's, …™·¥õ's ·¥è…¥ ü…™…¥·¥á s…™…¥·¥Ñ·¥á ùü∑s·¥õ ·¥ä·¥ú…¥·¥á ùü∏ùü∂ùü∏ùü∏ ·¥Ä…¥·¥Ö …™·¥õ's ·¥Ñ·¥è…¥s·¥õ·¥Ä…¥·¥õ ü è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö \n
üíù ·¥õ ú…™s  ô·¥è·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters) \n 
‚ù£Ô∏è ¬© ·¥è…¥  ô·¥á ú·¥Ä ü“ì ·¥è“ì [·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥°](https://t.me/tgshadow_fighters)
""", 
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="home_start")]]
        ),
    ) 


@Client.on_callback_query(filters.regex("set_close"))
async def on_close_menu(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("‚ùó ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
    await query.message.delete()

@Client.on_callback_query(filters.regex("close_panel"))
async def in_close_panel(_, query: CallbackQuery):
    await query.message.delete()

@Client.on_chat_join_request()
async def approve_join_chat(c: Client, m: ChatJoinRequest):
    if not m.from_user:
        return
    try:
        await c.approve_chat_join_request(m.chat.id, m.from_user.id)
    except FloodWait as e:
        await asyncio.sleep(e.x + 2)
        await c.approve_chat_join_request(m.chat.id, m.from_user.id)


@Client.on_message(filters.new_chat_members)
async def new_chat(c: Client, m: Message):
    chat_id = m.chat.id
    if await is_served_chat(chat_id):
        pass
    else:
        await add_served_chat(chat_id)
    ass_uname = me_user.username
    bot_id = me_bot.id
    for member in m.new_chat_members:
        if chat_id in await blacklisted_chats():
            await m.reply(
                "‚ùóÔ∏è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö  ô è s·¥ú·¥Ö·¥è ·¥ús·¥á Ä ·¥Ä…¥·¥Ö  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ."
            )
            return await bot.leave_chat(chat_id)
        if member.id == bot_id:
            return await m.reply(
                "‚ù§Ô∏è ·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á **…¢ Ä·¥è·¥ú·¥ò** !\n\n"
                "·¥Ä·¥ò·¥ò·¥è…™…¥·¥õ ·¥ç·¥á ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥…™s·¥õ Ä·¥Ä·¥õ·¥è Ä …™…¥ ·¥õ ú·¥á **…¢ Ä·¥è·¥ú·¥ò**, ·¥è·¥õ ú·¥á Ä·¥°…™s·¥á …™ ·¥°…™ ü ü …¥·¥è·¥õ  ô·¥á ·¥Ä ô ü·¥á ·¥õ·¥è ·¥°·¥è Ä·¥ã ·¥ò Ä·¥è·¥ò·¥á Ä ü è, ·¥Ä…¥·¥Ö ·¥Ö·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥õ è·¥ò·¥á /userbotjoin ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä·¥õ.\n\n"
                "·¥è…¥·¥Ñ·¥á ·¥Ö·¥è…¥·¥á, ·¥õ ú·¥á…¥ ·¥õ è·¥ò·¥á /reload",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("·¥õ·¥á·¥Ä·¥ç s ú·¥Ä·¥Ö·¥è·¥° ·¥ò Ä·¥è·¥ä·¥á·¥Ñ·¥õs", url=f"https://t.me/{UPDATES_CHANNEL}"),
                            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{GROUP_SUPPORT}")
                        ],
                        [
                            InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="set_close")
                        ]
                    ]
                )
            )


chat_watcher_group = 10
